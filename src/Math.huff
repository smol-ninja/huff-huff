#define function add(uint256, uint256) view returns(uint256)
#define function sub(uint256, uint256) view returns(uint256)
#define function mul(uint256, uint256) view returns(uint256)
#define function div(uint256, uint256) view returns(uint256)

#define macro MAIN() = takes(0) returns(0) {
    0x00
    calldataload
    0xE0
    shr

    dup1 __FUNC_SIG(add) eq try_add jumpi
    dup1 __FUNC_SIG(sub) eq try_sub jumpi
    dup1 __FUNC_SIG(mul) eq try_mul jumpi
    __FUNC_SIG(div) eq try_div jumpi

    try_add:
        TRY_ADD()

    try_sub:
        TRY_SUB()

    try_mul:
        TRY_MUL()

    try_div:
        TRY_DIV()
}

/**
* @dev Adds two numbers, revert on overflow.
*/
#define macro TRY_ADD() = takes(0) returns(0) {
    0x04 calldataload         // load a from calldata                     [a]
    dup1                      // duplicate a                              [a, a]
    0x24 calldataload         // load b from calldata                     [b, a, a]
    add                       // result = a + b                           [result, a]
    dup1 0x00 mstore          // duplicate result and store it in memory  [result, a]
    lt                        // check if result < a to prevent overflow  []
    0x00 eq returndata jumpi  // if false, jump to returndata
    0x00 0x00 revert          // revert if true

    returndata:
        0x20 0x00 return
}

/**
* @dev Subtracts two numbers, revert on overflow (i.e. if subtrahend is greater than minuend).
*/
#define macro TRY_SUB() = takes(0) returns(0) {
    0x24 calldataload         // load b from calldata                     [b]
    0x04 calldataload         // load a from calldata                     [a, b]
    dup1                      // duplicate a                              [a, a, b]
    dup3                      // duplicate b                              [b, a, a, b]  
    gt                        // check if b > a to prevert overflow       [0, a, b]                         
    0x00 eq returndata jumpi  // if false, jump to returndata             [a, b]
    0x00 0x00 revert          // revert if true

    returndata:
        sub                   // result = a - b                           [result]
        0x00 mstore
        0x20 0x00 return
}

#define macro TRY_MUL() = takes(0) returns(0) {
    0x24 calldataload         // load b from calldata                     [b]
    iszero                    // check if b == 0                          [0]
    0x01 eq returndata jumpi  // if true, return

    0x04 calldataload         // load a from calldata                     [a]
    0x24 calldataload         // load b from calldata                     [b, a]
    dup1                      // duplicate b                              [b, b, a]
    dup3                      // duplicate a                              [a, b, b, a]
    mul                       // result = a * b                           [result, b, a]
    dup1 0x00 mstore          // duplicate result and store it in memory  [result, b, a]
    div                       // check if result does not overflow        [a, a]
    eq returndata jumpi       // if false, jump to returndata             []
    0x00 0x00 revert          // revert if true

    returndata:
        0x20 0x00 return
}

#define macro TRY_DIV() = takes(0) returns(0) {
    0x24 calldataload         // load b from calldata                     [b]
    iszero                    // check if b == 0                          [0]
    0x01 eq revertdata jumpi  // if true, revert

    0x24 calldataload         // load b from calldata                     [b]
    0x04 calldataload         // load a from calldata                     [a, b]
    div                       // result = a / b                           [result]
    0x00 mstore
    0x20 0x00 return

    revertdata:
        0x00 0x00 revert
}